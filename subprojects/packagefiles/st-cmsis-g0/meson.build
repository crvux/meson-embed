project('st-cmsis-g0', 'c', 'cpp',
  license: 'Apache-2.0',
  meson_version: '>=1.5.1',
  version: '1.4.4',
  default_options: ['default_library=static', 'b_staticpic=false'],
)

st_cmsis_core = dependency('st-cmsis-core', version: '5.9.0')
root = 'cmsis-device-g0-1.4.4'

mcus = {
    'stm32g030c6': 'stm32g030__',
    'stm32g030c8': 'stm32g030__',
    'stm32g030f6': 'stm32g030__',
    'stm32g030j6': 'stm32g030__',
    'stm32g030k6': 'stm32g030__',
    'stm32g030k8': 'stm32g030__',
    'stm32g031c4': 'stm32g031__',
    'stm32g031c6': 'stm32g031__',
    'stm32g031c8': 'stm32g031__',
    'stm32g031f4': 'stm32g031__',
    'stm32g031f6': 'stm32g031__',
    'stm32g031f8': 'stm32g031__',
    'stm32g031g4': 'stm32g031__',
    'stm32g031g6': 'stm32g031__',
    'stm32g031g8': 'stm32g031__',
    'stm32g031j4': 'stm32g031__',
    'stm32g031j6': 'stm32g031__',
    'stm32g031k4': 'stm32g031__',
    'stm32g031k6': 'stm32g031__',
    'stm32g031k8': 'stm32g031__',
    'stm32g031y8': 'stm32g031__',
    'stm32g041c6': 'stm32g041__',
    'stm32g041c8': 'stm32g041__',
    'stm32g041f6': 'stm32g041__',
    'stm32g041f8': 'stm32g041__',
    'stm32g041g6': 'stm32g041__',
    'stm32g041g8': 'stm32g041__',
    'stm32g041j6': 'stm32g041__',
    'stm32g041k6': 'stm32g041__',
    'stm32g041k8': 'stm32g041__',
    'stm32g041y8': 'stm32g041__',
    'stm32g050c6': 'stm32g050__',
    'stm32g050c8': 'stm32g050__',
    'stm32g050f6': 'stm32g050__',
    'stm32g050k6': 'stm32g050__',
    'stm32g050k8': 'stm32g050__',
    'stm32g051c6': 'stm32g051__',
    'stm32g051c8': 'stm32g051__',
    'stm32g051f6': 'stm32g051__',
    'stm32g051f8': 'stm32g051__',
    'stm32g051g6': 'stm32g051__',
    'stm32g051g8': 'stm32g051__',
    'stm32g051k6': 'stm32g051__',
    'stm32g051k8': 'stm32g051__',
    'stm32g061c6': 'stm32g061__',
    'stm32g061c8': 'stm32g061__',
    'stm32g061f6': 'stm32g061__',
    'stm32g061f8': 'stm32g061__',
    'stm32g061g6': 'stm32g061__',
    'stm32g061g8': 'stm32g061__',
    'stm32g061k6': 'stm32g061__',
    'stm32g061k8': 'stm32g061__',
    'stm32g070cb': 'stm32g070__',
    'stm32g070kb': 'stm32g070__',
    'stm32g070rb': 'stm32g070__',
    'stm32g071c8': 'stm32g071__',
    'stm32g071cb': 'stm32g071__',
    'stm32g071eb': 'stm32g071__',
    'stm32g071g8': 'stm32g071__',
    'stm32g071gb': 'stm32g071__',
    'stm32g071k8': 'stm32g071__',
    'stm32g071kb': 'stm32g071__',
    'stm32g071r8': 'stm32g071__',
    'stm32g071rb': 'stm32g071__',
    'stm32g081cb': 'stm32g081__',
    'stm32g081eb': 'stm32g081__',
    'stm32g081gb': 'stm32g081__',
    'stm32g081kb': 'stm32g081__',
    'stm32g081rb': 'stm32g081__',
    'stm32g0b0ce': 'stm32g0b0__',
    'stm32g0b0ke': 'stm32g0b0__',
    'stm32g0b0re': 'stm32g0b0__',
    'stm32g0b0ve': 'stm32g0b0__',
    'stm32g0b1cb': 'stm32g0b1__',
    'stm32g0b1cc': 'stm32g0b1__',
    'stm32g0b1ce': 'stm32g0b1__',
    'stm32g0b1kb': 'stm32g0b1__',
    'stm32g0b1kc': 'stm32g0b1__',
    'stm32g0b1ke': 'stm32g0b1__',
    'stm32g0b1mb': 'stm32g0b1__',
    'stm32g0b1mc': 'stm32g0b1__',
    'stm32g0b1me': 'stm32g0b1__',
    'stm32g0b1ne': 'stm32g0b1__',
    'stm32g0b1rb': 'stm32g0b1__',
    'stm32g0b1rc': 'stm32g0b1__',
    'stm32g0b1re': 'stm32g0b1__',
    'stm32g0b1vb': 'stm32g0b1__',
    'stm32g0b1vc': 'stm32g0b1__',
    'stm32g0b1ve': 'stm32g0b1__',
    'stm32g0c1cc': 'stm32g0c1__',
    'stm32g0c1ce': 'stm32g0c1__',
    'stm32g0c1kc': 'stm32g0c1__',
    'stm32g0c1ke': 'stm32g0c1__',
    'stm32g0c1mc': 'stm32g0c1__',
    'stm32g0c1me': 'stm32g0c1__',
    'stm32g0c1rc': 'stm32g0c1__',
    'stm32g0c1re': 'stm32g0c1__',
    'stm32g0c1vc': 'stm32g0c1__',
    'stm32g0c1ve': 'stm32g0c1__',
}
mcu = meson.get_external_property('mcu')
if mcu not in mcus
  mcus_keys = mcus.keys()
  error(f'Please specify external property \'mcu\' with one of this values: @mcus_keys@')
endif
type = mcus[mcu]

type_lower = type.replace('_', 'x')
system_src = files(root / 'Source' / 'Templates' / 'system_stm32g0xx.c')
startup_src = files(root / 'Source' / 'Templates' / 'gcc' / f'startup_@type_lower@.s')
type_define = '-D' + type.to_upper().replace('_', 'x')
pkg_define = '-DSTM32G0'  # This can be used with universal stm32 header 

lib = static_library(
  f'st_cmsis_@type_lower@', system_src, startup_src,
  build_by_default: false,
  dependencies: [st_cmsis_core],
  include_directories: root / 'Include',
  c_args: type_define,
  cpp_args: type_define,
)

st_cmsis_g0_type_dep = declare_dependency(
  version: meson.project_version(),
  dependencies: [st_cmsis_core],
  include_directories: root / 'Include',
  compile_args: [type_define, pkg_define],
  link_with: lib,
)
st_cmsis_g0_dep = declare_dependency(
  version: meson.project_version(),
  dependencies: st_cmsis_g0_type_dep,
  link_args: ['-Xlinker', '--default-script=' + files('ld' / mcu + '.ld')[0].full_path()],
)