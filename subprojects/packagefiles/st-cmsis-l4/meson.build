project('st-cmsis-l4', 'c', 'cpp',
  license: 'Apache-2.0',
  meson_version: '>=1.5.1',
  version: '1.7.4',
  default_options: ['default_library=static', 'b_staticpic=false'],
)

st_cmsis_core = dependency('st-cmsis-core', version: '5.9.0')
root = 'cmsis-device-l4-1.7.4'

# Per type dependencies with -D compiler flags and startup sources
types = [
  'stm32l412__', 
  'stm32l422__', 
  'stm32l431__', 
  'stm32l432__', 
  'stm32l433__', 
  'stm32l442__', 
  'stm32l443__', 
  'stm32l451__', 
  'stm32l452__', 
  'stm32l462__', 
  'stm32l471__', 
  'stm32l475__', 
  'stm32l476__', 
  'stm32l485__', 
  'stm32l486__', 
  'stm32l496__', 
  'stm32l4a6__', 
  'stm32l4p5__', 
  'stm32l4q5__', 
  'stm32l4r5__', 
  'stm32l4r7__', 
  'stm32l4r9__', 
  'stm32l4s5__', 
  'stm32l4s7__', 
  'stm32l4s9__', 
]
system_src = files(root / 'Source' / 'Templates' / 'system_stm32l4xx.c')
foreach type : types
  type_lower = type.replace('_', 'x')
  startup_src = files(root / 'Source' / 'Templates' / 'gcc' / f'startup_@type_lower@.s')
  type_define = '-D' + type.to_upper().replace('_', 'x')
  pkg_define = '-DSTM32L4'  # This can be used with universal stm32 header 

  lib = static_library(
    f'st_cmsis_@type_lower@', system_src, startup_src,
    build_by_default: false,
    dependencies: [st_cmsis_core],
    include_directories: root / 'Include',
    c_args: type_define,
    cpp_args: type_define,
  )
  set_variable(f'st_cmsis_@type_lower@_dep', declare_dependency(
    version: meson.project_version(),
    dependencies: [st_cmsis_core],
    include_directories: root / 'Include',
    compile_args: [type_define, pkg_define],
    link_with: lib,
  ))
endforeach

# Per MCU dependencies with default linker script
mcus = {
    'stm32l412c8': ['stm32l412__', 64, 40],
    'stm32l412cb': ['stm32l412__', 128, 40],
    'stm32l412k8': ['stm32l412__', 64, 40],
    'stm32l412kb': ['stm32l412__', 128, 40],
    'stm32l412r8': ['stm32l412__', 64, 40],
    'stm32l412rb': ['stm32l412__', 128, 40],
    'stm32l412t8': ['stm32l412__', 64, 40],
    'stm32l412tb': ['stm32l412__', 128, 40],
    'stm32l422cb': ['stm32l422__', 128, 40],
    'stm32l422kb': ['stm32l422__', 128, 40],
    'stm32l422rb': ['stm32l422__', 128, 40],
    'stm32l422tb': ['stm32l422__', 128, 40],
    'stm32l431cb': ['stm32l431__', 128, 64],
    'stm32l431cc': ['stm32l431__', 256, 64],
    'stm32l431kb': ['stm32l431__', 128, 64],
    'stm32l431kc': ['stm32l431__', 256, 64],
    'stm32l431rb': ['stm32l431__', 128, 64],
    'stm32l431rc': ['stm32l431__', 256, 64],
    'stm32l431vc': ['stm32l431__', 256, 64],
    'stm32l432kb': ['stm32l432__', 128, 64],
    'stm32l432kc': ['stm32l432__', 256, 64],
    'stm32l433cb': ['stm32l433__', 128, 64],
    'stm32l433cc': ['stm32l433__', 256, 64],
    'stm32l433rb': ['stm32l433__', 128, 64],
    'stm32l433rc': ['stm32l433__', 256, 64],
    'stm32l433vc': ['stm32l433__', 256, 64],
    'stm32l442kc': ['stm32l442__', 256, 64],
    'stm32l443cc': ['stm32l443__', 256, 64],
    'stm32l443rc': ['stm32l443__', 256, 64],
    'stm32l443vc': ['stm32l443__', 256, 64],
    'stm32l451cc': ['stm32l451__', 256, 160],
    'stm32l451ce': ['stm32l451__', 512, 160],
    'stm32l451rc': ['stm32l451__', 256, 160],
    'stm32l451re': ['stm32l451__', 512, 160],
    'stm32l451vc': ['stm32l451__', 256, 160],
    'stm32l451ve': ['stm32l451__', 512, 160],
    'stm32l452cc': ['stm32l452__', 256, 160],
    'stm32l452ce': ['stm32l452__', 512, 160],
    'stm32l452rc': ['stm32l452__', 256, 160],
    'stm32l452re': ['stm32l452__', 512, 160],
    'stm32l452vc': ['stm32l452__', 256, 160],
    'stm32l452ve': ['stm32l452__', 512, 160],
    'stm32l462ce': ['stm32l462__', 512, 160],
    'stm32l462re': ['stm32l462__', 512, 160],
    'stm32l462ve': ['stm32l462__', 512, 160],
    'stm32l471qe': ['stm32l471__', 512, 128],
    'stm32l471qg': ['stm32l471__', 1024, 128],
    'stm32l471re': ['stm32l471__', 512, 128],
    'stm32l471rg': ['stm32l471__', 1024, 128],
    'stm32l471ve': ['stm32l471__', 512, 128],
    'stm32l471vg': ['stm32l471__', 1024, 128],
    'stm32l471ze': ['stm32l471__', 512, 128],
    'stm32l471zg': ['stm32l471__', 1024, 128],
    'stm32l475rc': ['stm32l475__', 256, 128],
    'stm32l475re': ['stm32l475__', 512, 128],
    'stm32l475rg': ['stm32l475__', 1024, 128],
    'stm32l475vc': ['stm32l475__', 256, 128],
    'stm32l475ve': ['stm32l475__', 512, 128],
    'stm32l475vg': ['stm32l475__', 1024, 128],
    'stm32l476je': ['stm32l476__', 512, 128],
    'stm32l476jg': ['stm32l476__', 1024, 128],
    'stm32l476me': ['stm32l476__', 512, 128],
    'stm32l476mg': ['stm32l476__', 1024, 128],
    'stm32l476qe': ['stm32l476__', 512, 128],
    'stm32l476qg': ['stm32l476__', 1024, 128],
    'stm32l476rc': ['stm32l476__', 256, 128],
    'stm32l476re': ['stm32l476__', 512, 128],
    'stm32l476rg': ['stm32l476__', 1024, 128],
    'stm32l476vc': ['stm32l476__', 256, 128],
    'stm32l476ve': ['stm32l476__', 512, 128],
    'stm32l476vg': ['stm32l476__', 1024, 128],
    'stm32l476ze': ['stm32l476__', 512, 128],
    'stm32l476zg': ['stm32l476__', 1024, 128],
    'stm32l486jg': ['stm32l486__', 1024, 128],
    'stm32l486qg': ['stm32l486__', 1024, 128],
    'stm32l486rg': ['stm32l486__', 1024, 128],
    'stm32l486vg': ['stm32l486__', 1024, 128],
    'stm32l486zg': ['stm32l486__', 1024, 128],
    'stm32l496ae': ['stm32l496__', 512, 320],
    'stm32l496ag': ['stm32l496__', 1024, 320],
    'stm32l496qe': ['stm32l496__', 512, 320],
    'stm32l496qg': ['stm32l496__', 1024, 320],
    'stm32l496re': ['stm32l496__', 512, 320],
    'stm32l496rg': ['stm32l496__', 1024, 320],
    'stm32l496ve': ['stm32l496__', 512, 320],
    'stm32l496vg': ['stm32l496__', 1024, 320],
    'stm32l496wg': ['stm32l496__', 1024, 320],
    'stm32l496ze': ['stm32l496__', 512, 320],
    'stm32l496zg': ['stm32l496__', 1024, 320],
    'stm32l4a6ag': ['stm32l4a6__', 1024, 320],
    'stm32l4a6qg': ['stm32l4a6__', 1024, 320],
    'stm32l4a6rg': ['stm32l4a6__', 1024, 320],
    'stm32l4a6vg': ['stm32l4a6__', 1024, 320],
    'stm32l4a6zg': ['stm32l4a6__', 1024, 320],
    'stm32l4p5ae': ['stm32l4p5__', 512, 320],
    'stm32l4p5ag': ['stm32l4p5__', 1024, 320],
    'stm32l4p5ce': ['stm32l4p5__', 512, 320],
    'stm32l4p5cg': ['stm32l4p5__', 1024, 320],
    'stm32l4p5qe': ['stm32l4p5__', 512, 320],
    'stm32l4p5qg': ['stm32l4p5__', 1024, 320],
    'stm32l4p5re': ['stm32l4p5__', 512, 320],
    'stm32l4p5rg': ['stm32l4p5__', 1024, 320],
    'stm32l4p5ve': ['stm32l4p5__', 512, 320],
    'stm32l4p5vg': ['stm32l4p5__', 1024, 320],
    'stm32l4p5ze': ['stm32l4p5__', 512, 320],
    'stm32l4p5zg': ['stm32l4p5__', 1024, 320],
    'stm32l4q5ag': ['stm32l4q5__', 1024, 320],
    'stm32l4q5cg': ['stm32l4q5__', 1024, 320],
    'stm32l4q5qg': ['stm32l4q5__', 1024, 320],
    'stm32l4q5rg': ['stm32l4q5__', 1024, 320],
    'stm32l4q5vg': ['stm32l4q5__', 1024, 320],
    'stm32l4q5zg': ['stm32l4q5__', 1024, 320],
    'stm32l4r5ag': ['stm32l4r5__', 1024, 640],
    'stm32l4r5ai': ['stm32l4r5__', 2048, 640],
    'stm32l4r5qg': ['stm32l4r5__', 1024, 640],
    'stm32l4r5qi': ['stm32l4r5__', 2048, 640],
    'stm32l4r5vg': ['stm32l4r5__', 1024, 640],
    'stm32l4r5vi': ['stm32l4r5__', 2048, 640],
    'stm32l4r5zg': ['stm32l4r5__', 1024, 640],
    'stm32l4r5zi': ['stm32l4r5__', 2048, 640],
    'stm32l4r7ai': ['stm32l4r7__', 2048, 640],
    'stm32l4r7vi': ['stm32l4r7__', 2048, 640],
    'stm32l4r7zi': ['stm32l4r7__', 2048, 640],
    'stm32l4r9ag': ['stm32l4r9__', 1024, 640],
    'stm32l4r9ai': ['stm32l4r9__', 2048, 640],
    'stm32l4r9vg': ['stm32l4r9__', 1024, 640],
    'stm32l4r9vi': ['stm32l4r9__', 2048, 640],
    'stm32l4r9zg': ['stm32l4r9__', 1024, 640],
    'stm32l4r9zi': ['stm32l4r9__', 2048, 640],
    'stm32l4s5ai': ['stm32l4s5__', 2048, 640],
    'stm32l4s5qi': ['stm32l4s5__', 2048, 640],
    'stm32l4s5vi': ['stm32l4s5__', 2048, 640],
    'stm32l4s5zi': ['stm32l4s5__', 2048, 640],
    'stm32l4s7ai': ['stm32l4s7__', 2048, 640],
    'stm32l4s7vi': ['stm32l4s7__', 2048, 640],
    'stm32l4s7zi': ['stm32l4s7__', 2048, 640],
    'stm32l4s9ai': ['stm32l4s9__', 2048, 640],
    'stm32l4s9vi': ['stm32l4s9__', 2048, 640],
    'stm32l4s9zi': ['stm32l4s9__', 2048, 640],
}
foreach mcu, opts : mcus
  ld_default_script_name = f'@mcu@.ld'
  configure_file(input : 'default.ld.in',
    output : ld_default_script_name,
    configuration : {
      'flash_size_kb': opts[1],
      'ram_size_kb': opts[2],
  })
  ld_default_script = ['-Xlinker', '--default-script=' + meson.project_build_root() / ld_default_script_name]

  compile_args = []
  if get_option('use_hal')
    compile_args += '-DUSE_HAL_DRIVER'
  endif

  type_lower = opts[0].replace('_', 'x')
  set_variable(f'st_cmsis_@mcu@_dep', declare_dependency(
    version: meson.project_version(),
    dependencies: get_variable(f'st_cmsis_@type_lower@_dep'),
    compile_args: compile_args,
    link_args: ld_default_script,
  ))
endforeach