project('st-cmsis-h7', 'c', 'cpp',
  license: 'Apache-2.0',
  meson_version: '>=1.5.1',
  version: '1.10.6',
  default_options: ['default_library=static', 'b_staticpic=false'],
)

st_cmsis_core = dependency('st-cmsis-core', version: '5.9.0')
root = 'cmsis-device-h7-1.10.6'

# Per type dependencies with -D compiler flags and startup sources
types = [
  'stm32h743__', 
  'stm32h753__', 
  'stm32h750__', 
  'stm32h742__', 
  'stm32h745__', 
  'stm32h745_g', 
  'stm32h755__', 
  'stm32h747__', 
  'stm32h747_g', 
  'stm32h757__', 
  'stm32h7b0__', 
  'stm32h7b0__q', 
  'stm32h7a3__', 
  'stm32h7b3__', 
  'stm32h7a3__q', 
  'stm32h7b3__q', 
  'stm32h735__', 
  'stm32h733__', 
  'stm32h730__', 
  'stm32h730__q', 
  'stm32h725__', 
  'stm32h723__', 
]
system_src = files(root / 'Source' / 'Templates' / 'system_stm32h7xx.c')
foreach type : types
  type_lower = type.replace('_', 'x')
  startup_src = files(root / 'Source' / 'Templates' / 'gcc' / f'startup_@type_lower@.s')
  type_define = '-D' + type.to_upper().replace('_', 'x')
  pkg_define = '-DSTM32H7'  # This can be used with universal stm32 header 

  lib = static_library(
    f'st_cmsis_@type_lower@', system_src, startup_src,
    build_by_default: false,
    dependencies: [st_cmsis_core],
    include_directories: root / 'Include',
    c_args: type_define,
    cpp_args: type_define,
  )
  set_variable(f'st_cmsis_@type_lower@_dep', declare_dependency(
    version: meson.project_version(),
    dependencies: [st_cmsis_core],
    include_directories: root / 'Include',
    compile_args: [type_define, pkg_define],
    link_with: lib,
  ))
endforeach

# Per MCU dependencies with default linker script
mcus = {
    'stm32h723ve': ['stm32h723__', 512, 564],
    'stm32h723vg': ['stm32h723__', 1024, 564],
    'stm32h723ze': ['stm32h723__', 512, 564],
    'stm32h723zg': ['stm32h723__', 1024, 564],
    'stm32h725ae': ['stm32h725__', 512, 564],
    'stm32h725ag': ['stm32h725__', 1024, 564],
    'stm32h725ie': ['stm32h725__', 512, 564],
    'stm32h725ig': ['stm32h725__', 1024, 564],
    'stm32h725re': ['stm32h725__', 512, 564],
    'stm32h725rg': ['stm32h725__', 1024, 564],
    'stm32h725ve': ['stm32h725__', 512, 564],
    'stm32h725vg': ['stm32h725__', 1024, 564],
    'stm32h725ze': ['stm32h725__', 512, 564],
    'stm32h725zg': ['stm32h725__', 1024, 564],
    'stm32h730abq': ['stm32h730__q', 128, 564],
    'stm32h730ibq': ['stm32h730__q', 128, 564],
    'stm32h730vb': ['stm32h730__', 128, 564],
    'stm32h730zb': ['stm32h730__', 128, 564],
    'stm32h733vg': ['stm32h733__', 1024, 564],
    'stm32h733zg': ['stm32h733__', 1024, 564],
    'stm32h735ag': ['stm32h735__', 1024, 564],
    'stm32h735ig': ['stm32h735__', 1024, 564],
    'stm32h735rg': ['stm32h735__', 1024, 564],
    'stm32h735vg': ['stm32h735__', 1024, 564],
    'stm32h735zg': ['stm32h735__', 1024, 564],
    'stm32h742ag': ['stm32h742__', 1024, 692],
    'stm32h742ai': ['stm32h742__', 2048, 692],
    'stm32h742bg': ['stm32h742__', 1024, 692],
    'stm32h742bi': ['stm32h742__', 2048, 692],
    'stm32h742ig': ['stm32h742__', 1024, 692],
    'stm32h742ii': ['stm32h742__', 2048, 692],
    'stm32h742vg': ['stm32h742__', 1024, 692],
    'stm32h742vi': ['stm32h742__', 2048, 692],
    'stm32h742xg': ['stm32h742__', 1024, 692],
    'stm32h742xi': ['stm32h742__', 2048, 692],
    'stm32h742zg': ['stm32h742__', 1024, 692],
    'stm32h742zi': ['stm32h742__', 2048, 692],
    'stm32h743ag': ['stm32h743__', 1024, 1024],
    'stm32h743ai': ['stm32h743__', 2048, 1024],
    'stm32h743bg': ['stm32h743__', 1024, 1024],
    'stm32h743bi': ['stm32h743__', 2048, 1024],
    'stm32h743ig': ['stm32h743__', 1024, 1024],
    'stm32h743ii': ['stm32h743__', 2048, 1024],
    'stm32h743vg': ['stm32h743__', 1024, 1024],
    'stm32h743vi': ['stm32h743__', 2048, 1024],
    'stm32h743xg': ['stm32h743__', 1024, 1024],
    'stm32h743xi': ['stm32h743__', 2048, 1024],
    'stm32h743zg': ['stm32h743__', 1024, 1024],
    'stm32h743zi': ['stm32h743__', 2048, 1024],
    'stm32h745bg': ['stm32h745_g', 1024, 1024],
    'stm32h745bi': ['stm32h745__', 2048, 1024],
    'stm32h745ig': ['stm32h745_g', 1024, 1024],
    'stm32h745ii': ['stm32h745__', 2048, 1024],
    'stm32h745xg': ['stm32h745_g', 1024, 1024],
    'stm32h745xi': ['stm32h745__', 2048, 1024],
    'stm32h745zg': ['stm32h745_g', 1024, 1024],
    'stm32h745zi': ['stm32h745__', 2048, 1024],
    'stm32h747ag': ['stm32h747_g', 1024, 1024],
    'stm32h747ai': ['stm32h747__', 2048, 1024],
    'stm32h747bg': ['stm32h747_g', 1024, 1024],
    'stm32h747bi': ['stm32h747__', 2048, 1024],
    'stm32h747ig': ['stm32h747_g', 1024, 1024],
    'stm32h747ii': ['stm32h747__', 2048, 1024],
    'stm32h747xg': ['stm32h747_g', 1024, 1024],
    'stm32h747xi': ['stm32h747__', 2048, 1024],
    'stm32h747zi': ['stm32h747__', 2048, 1024],
    'stm32h750ib': ['stm32h750__', 128, 1024],
    'stm32h750vb': ['stm32h750__', 128, 1024],
    'stm32h750xb': ['stm32h750__', 128, 1024],
    'stm32h750zb': ['stm32h750__', 128, 1024],
    'stm32h753ai': ['stm32h753__', 2048, 1024],
    'stm32h753bi': ['stm32h753__', 2048, 1024],
    'stm32h753ii': ['stm32h753__', 2048, 1024],
    'stm32h753vi': ['stm32h753__', 2048, 1024],
    'stm32h753xi': ['stm32h753__', 2048, 1024],
    'stm32h753zi': ['stm32h753__', 2048, 1024],
    'stm32h755bi': ['stm32h755__', 2048, 1024],
    'stm32h755ii': ['stm32h755__', 2048, 1024],
    'stm32h755xi': ['stm32h755__', 2048, 1024],
    'stm32h755zi': ['stm32h755__', 2048, 1024],
    'stm32h757ai': ['stm32h757__', 2048, 1024],
    'stm32h757bi': ['stm32h757__', 2048, 1024],
    'stm32h757ii': ['stm32h757__', 2048, 1024],
    'stm32h757xi': ['stm32h757__', 2048, 1024],
    'stm32h757zi': ['stm32h757__', 2048, 1024],
    'stm32h7a3agq': ['stm32h7a3__q', 1024, 1184],
    'stm32h7a3aiq': ['stm32h7a3__q', 2048, 1184],
    'stm32h7a3ig': ['stm32h7a3__', 1024, 1184],
    'stm32h7a3ii': ['stm32h7a3__', 2048, 1184],
    'stm32h7a3iiq': ['stm32h7a3__q', 2048, 1184],
    'stm32h7a3lgq': ['stm32h7a3__q', 1024, 1184],
    'stm32h7a3liq': ['stm32h7a3__q', 2048, 1184],
    'stm32h7a3ng': ['stm32h7a3__', 1024, 1184],
    'stm32h7a3ni': ['stm32h7a3__', 1024, 1184],
    'stm32h7a3qiq': ['stm32h7a3__q', 2048, 1184],
    'stm32h7a3rg': ['stm32h7a3__', 1024, 1184],
    'stm32h7a3ri': ['stm32h7a3__', 2048, 1184],
    'stm32h7a3vg': ['stm32h7a3__', 1024, 1184],
    'stm32h7a3vgq': ['stm32h7a3__q', 1024, 1184],
    'stm32h7a3vi': ['stm32h7a3__', 2048, 1184],
    'stm32h7a3viq': ['stm32h7a3__q', 2048, 1184],
    'stm32h7a3zg': ['stm32h7a3__', 1024, 1184],
    'stm32h7a3zi': ['stm32h7a3__', 2048, 1184],
    'stm32h7a3ziq': ['stm32h7a3__q', 2048, 1184],
    'stm32h7b0abq': ['stm32h7b0__q', 128, 1184],
    'stm32h7b0ibq': ['stm32h7b0__q', 128, 1184],
    'stm32h7b0ib': ['stm32h7b0__', 128, 1184],
    'stm32h7b0rb': ['stm32h7b0__', 128, 1376],
    'stm32h7b0vb': ['stm32h7b0__', 128, 1184],
    'stm32h7b0zb': ['stm32h7b0__', 128, 1184],
    'stm32h7b3aiq': ['stm32h7b3__q', 2048, 1184],
    'stm32h7b3ii': ['stm32h7b3__', 2048, 1184],
    'stm32h7b3iiq': ['stm32h7b3__q', 2048, 1184],
    'stm32h7b3liq': ['stm32h7b3__q', 2048, 1184],
    'stm32h7b3ni': ['stm32h7b3__', 2048, 1184],
    'stm32h7b3qiq': ['stm32h7b3__q', 2048, 1184],
    'stm32h7b3ri': ['stm32h7b3__', 2048, 1184],
    'stm32h7b3vi': ['stm32h7b3__', 2048, 1184],
    'stm32h7b3viq': ['stm32h7b3__q', 2048, 1184],
    'stm32h7b3zi': ['stm32h7b3__', 2048, 1184],
    'stm32h7b3ziq': ['stm32h7b3__q', 2048, 1184],
    'stm32h7a3igq': ['stm32h7a3__q', 1024, 1184],
    'stm32h7a3zgq': ['stm32h7a3__q', 1024, 1184],
}
foreach mcu, opts : mcus
  ld_default_script_name = f'@mcu@.ld'
  configure_file(input : 'default.ld.in',
    output : ld_default_script_name,
    configuration : {
      'flash_size_kb': opts[1],
      'ram_size_kb': opts[2],
  })
  ld_default_script = ['-Xlinker', '--default-script=' + meson.project_build_root() / ld_default_script_name]

  compile_args = []
  if get_option('use_hal')
    compile_args += '-DUSE_HAL_DRIVER'
  endif

  type_lower = opts[0].replace('_', 'x')
  set_variable(f'st_cmsis_@mcu@_dep', declare_dependency(
    version: meson.project_version(),
    dependencies: get_variable(f'st_cmsis_@type_lower@_dep'),
    compile_args: compile_args,
    link_args: ld_default_script,
  ))
endforeach